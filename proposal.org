Project Description - Implementing Fully-Homomorphic Encryption 

* Introduction
Implementing cryptographic algorithms in an efficient way without
sacrificing correctness is challenging, as is verifying that the
implementation follows the specification. This project introduces a
domain-specific language embedded (EDSL) in the purely functional
programming language Haskell for expressing cryptographic algorithms.

The final showcase of this embedded language is to express a
particular encryption scheme that emerged in 2009 called fully
homomorphic encryption (FHE), which allows third-parties to carry out
arbitrary computations on encrypted values without any knowledge of
the key.

* Context

The result will then be compared against similar hand-written
implementations targeting general purpose processors or
implementations written in other DSLs such as Lava and the success of
the project will be determined by both the clarity of the code, ease
of use (time it takes to develop an example problem) and
performance. Additionally, there is a proprietary domain-specific
language for implementing and verifying cryptographic algorithms which
also targets FPGAs that has been developed by Galois, Inc. for the NSA
which may be used as the baseline for comparison.

* Goals and Challenges
The project goal is to implement an EDSL that allows implementing
cryptographic algorithms in a high-level and composable way that can
be compiled to produce efficient code.

The implementation of the fully-homomorphic encryption should be
written in a clear, high-level way, while allowing the user to produce
different variants of generated code with different performance
characteristics without modifying the high-level structure of the
algorithm. This will allow for quickly experimenting with generating
circuits having different time--space trade-offs. This approach may be
applied to other algorithms, such as AES or SHA2.


A limited form of property or model-based checking may be included.

This project should be considered a success if the following criteria are met:
The resulting program performs better than HELib. HELib is a C++ library that implements homomorphic encryption, and is the most available FHE solution at the moment. HElib implements the Brakerski-Gentry-Vaikuntanathan (BGV) scheme with optimizations.
As a backup goal, AES, DES and Salsa20 would be implemented in the designed DSL. They should perform comparatively to implementations in Cryptol.
The implementation of AES, DES and Salsa20 should be comparable in size and simplicity to the Cryptol implementation.
Show how itâ€™s possible to use combinators to turn a naive version of an algorithm into a more efficient version by making space-time trade-offs.
Testing functional correctness of a encryption scheme (AES).

The project is research oriented and is intended to result in a publication.
