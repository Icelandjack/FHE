http://adam.chlipala.net/papers/PhoasICFP08/PhoasICFP08.pdf
A Type-Preserving Compiler in Haskell
http://www.cse.chalmers.se/~bernardy/NamesForFree.pdf
http://www.cs.utexas.edu/~wcook/Drafts/2012/MTC.pdf

http://queue.acm.org/detail.cfm?id=2617811 (acm: DSLs)

* Abstract
* Introduction
<save for later>
* Tutorial
The purpose of this thesis will be to create an embedded domain
specific language for describing fully homormophic encryption (FHE) in
Haskell.

** Haskell 

** Homomorphic Encryption
Explain symmetric, asymmetric encryption. Mention that homomorphic
encryption can be either symmetric or asymmetric.

Encryption = 

Encryption schemes that allow simple operations on encrypted data have
been known for a long time, allowing adding or multiplying ciphertexts
but not both at the same time:
+ Encryption system of Goldwasser & Micali
+ El Gamal 
+ Paillier 

Boneh, Goh and Nissim were the first to construct a scheme capable of
performing both operations at the same time (arbitrary number of
additions, 1 multiplication).

In 2009 Gentry constructed a fully homomorphic encryption scheme (FHE)
which can evaluate an arbitrary number of additions and
multiplications (allowing computing any function) on encrypted data.

http://research.microsoft.com/pubs/148825/ccs2011_submission_412.pdf

----

https://crypto.stanford.edu/craig/craig-thesis.pdf

http://www.math.leidenuniv.nl/~dfreeman/smart.pdf

An encryption scheme that allows meaningful computation on encrypted data, namely a homomorphic encryption scheme.

*** Somewhat Homomorphic Encryption
Many applications only require somewhat homomorphic encryption schemes, which support a limited number of homomorphic operations.
==>
Can be much faster, more compact than FHE schemes.
http://research.microsoft.com/pubs/148825/ccs2011_submission_412.pdf
*** Fully Homomorphic Encryption
First suggested in 1978. Fully homomorphic encryption allows computation with no limitation on
ciphertexts. General computations on encrypted data.http://crypto.stanford.edu/craig/easy-fhe.pdf

Without exposing any encrypted data.

One can even encrypt the description of the function ‘f’.

First FHE scheme by Gentry in 2009.

Initial solution by Gentry was not practical, subsequent develop-
ments produced other schemes [DGHV10, SV10, SS10] lead- ing up to the
most recent solutions of Brakerski and Vaikun- tanathan [BV11b,
BV11a], an implementation of which we consider in this paper. The
scheme is e cient and simple, produces short ciphertexts, and its
security is based on the \ring learning with errors" (Ring LWE)
problem [LPR10].
http://research.microsoft.com/pubs/148825/ccs2011_submission_412.pdf

**** Concrete Schemes
+ Van Dijk, Halevi, Caikuntanathan
Uses only simple integer operations rather than lattices (Gentry).

* Old
** DSL Design
When designing the DSL a high-level design was ...

Inspired by Cryptol with type-level naturals[2]

: split : {a b c} [a*b]c -> [a][b]c

: KeyExpansion_128 : [4][32] -> [11][4][4][8];
: KeyExpansion_128 keyAsWords = [| transpose s || s <- ss ]]
:   where {
:     ss = groupBy(4, [| reverse (splitBy(4, w)) || w <- ws |]);
:     ws = keyAsWords # ([| nextWord_128(i, w, w')
:                        || i  <- [4..43]
:                        || w  <- ws
:                        || w' <- drop(3, ws)
:                        |]);
:   };

There was inspiration from other DSL's such as Lava 

Pull arrays are good for immutable array representation used by
similar projects like Pan, Feldspar, Repa and Obsidian. (http://www.cs.indiana.edu/pub/techreports/TR712.pdf)

Compiling Embedded Languages by Conal et.al.

** Related Work
+ “[[https://eprint.iacr.org/2011/561.pdf][A Domain-Specific Language for Computing on Encrypted Data]]”
Haskell-based EDSL 
+ “Generating Fast Multipliers Using Clever Circuits”
+ “[[https://drive.google.com/file/d/0ByALnB6PvvHEdlhGa01hQTcyckU/edit?usp=sharing][Making Domain-Specific Hardware Synthesis Tools Cost-Efficient]]”: The paper presents a method for efficient development of High-Level Synthesis (HLS) tools, which are normally very costly to create. The method is based on Lightweight Modular Staging, which is a compiler framework in Scala.

+ https://www.cs.drexel.edu/~mainland/publications/mainland10nikola.pdf A DSL for GPU computation with observable function application.

+ http://hackage.haskell.org/package/ersatz A library for sharing recommended by Edward Kmett

+ http://www.cs.uu.nl/wiki/pub/Afp/CourseLiterature/Gill-09-TypeSafeReification.pdf 

+ http://research.microsoft.com/pubs/146975/ihe.pdf Implementing fully homomorphic encryption

+ Homomorphic Encryption from Learning with Errors: Conceptually-Simpler, Asymptotically-Faster, Attribute-Based http://eprint.iacr.org/2013/340.pdf

+ Can Homomorphic Encryption be Practical? https://eprint.iacr.org/2011/405

+ Fully Homomorphic Encryption without Bootstrapping https://eprint.iacr.org/2011/277

Original Domain Analysis paper for the CSP project (2001) [confidential]

Notes on performance of FPGA implementations of AES and DES (July, 2006)
See also IP Cores survey from George Mason U (Dec, 2005) 
Equivalence Checking Paper (Apr 2008) 
** References
[1] http://cs.au.dk/~stm/local-cache/gentry-thesis.pdf A Fully Homomorphic Encryption Scheme
[2] http://gauss.ececs.uc.edu/Courses/c4003/lectures/Cryptol/Cryptol-Tutorial.pdf
