{-# LANGUAGE DeriveFunctor, MonadComprehensions, PatternSynonyms #-}

import Data.Bits
import Data.List
import Data.List.Split
import Data.Maybe
import Data.Proxy
import Data.Word
import GHC.TypeLits

import EDSL
import Matrix
import GF 

-- Testing
import Test.QuickCheck hiding ((.&.))
import Control.Applicative

-- http://www.design-reuse.com/articles/13981/fpga-implementation-of-aes-encryption-and-decryption.html
-- One of foremost requirements of AES is high data throughput,
-- easiest solution is pipeline architecture. Pipelining is only
-- possible within each round: next round can start only when previous
-- round is totally completed as input data of the next round solely
-- depend on the output of the previous rounds. 

-- Split state into 4 32-bit, feed each to S-box.
-- Then Mix column (32-bits of output each), matrix mult → 32 bit. 

type State  a = Matrix (Exp a)
type Column a = [Exp a]

-- | SubBytes Round
--   Composition of inverse function over GF(2⁸) and an invertible affine transformation,
--   implemented as a 256 byte Look-Up Table (LUT) in ROM.
--   Substitutions operate independently on each byte.

-- Book: Cryptographic Algorithms on Reconfigurable Hardware
-- Two alternatives, pre-computed values stored in build in memory module.
--     Expensive but helps save valuable time.
--     Constrained memory + on-the-fly computation.

-- | Rijndael S-box.
--   TODO: Look into using composite-field GF(2⁴)²
sBox ∷ [Word8]
sBox = [
  0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
  0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
  0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
  0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
  0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
  0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
  0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
  0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
  0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
  0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
  0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
  0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
  0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
  0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
  0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
  0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16
  ]

sBoxTable ∷ Exp [Word8]
sBoxTable = Table sBox

(‼) ∷ Exp [Word8] → Exp Word8 → Exp Word8
(‼) = TableIndex

subBytes ∷ State Word8 → State Word8
subBytes state = fmap (sBoxTable ‼) state
      
-- | ShiftRows Round
shiftLeft ∷ Int → [a] → [a]
shiftLeft 0 xs = xs
shiftLeft _ [] = []
shiftLeft n xs
  | n' ← n `mod` length xs
  = drop n' xs ++ take n' xs

-- Cyclically shifts the bytes in row i by i offsets.
shiftRows ∷ Matrix a → Matrix a
shiftRows (Matrix rows) = fromLists' (zipWith shiftLeft [0..] rows)

-- | MixColumns
--   Preferable to perform multiplication in Galois Field. Pipelining
--   can be introduced. One column of the new state matrix can be achieved
--   in one clock cycle only so the whole of the new state matrix can be 
--   achieved in 5 cycles. 
-- http://www.design-reuse.com/articles/13981/fpga-implementation-of-aes-encryption-and-decryption.html
    
-- http://books.google.se/books?id=qIY9RTzemr8C&lpg=PA259&ots=FWpFOvP-xH&dq=multiplication%20GF%20FPGA%20aes&hl=is&pg=PA260#v=onepage&q=multiplication%20GF%20FPGA%20aes&f=false    
--     

mixColumns ∷ State Word8 → State Word8
mixColumns = overColumns mixColumn

mixColumn ∷ Column Word8 → Column Word8
mixColumn [a₀, a₁, a₂, a₃] = [b₀, b₁, b₂, b₃] where
  b₀ = 0x2 • a₀ ⊕ 0x3 • a₁ ⊕       a₂ ⊕       a₃
  b₁ =       a₀ ⊕ 0x2 • a₁ ⊕ 0x3 • a₂ ⊕       a₃
  b₂ =       a₀ ⊕       a₁ ⊕ 0x2 • a₂ ⊕ 0x3 • a₃ 
  b₃ = 0x3 • a₀ ⊕       a₁ ⊕       a₂ ⊕ 0x2 • a₃ 

-- | TESTING
instance Arbitrary a ⇒ Arbitrary (Matrix a) where
  arbitrary = fromList' <$> vector 16

example ∷ State Word8
example = fromLists' [ [0, 1, 2, 3]
                     , [4, 5, 6, 7]
                     , [8, 9, 10, 11]
                     , [12, 13, 14, 15]
                     ]

prop_shift ∷ [Int] → Bool
prop_shift xs = shiftLeft (length xs) xs == xs

prop_shift2 ∷ [Int] → Bool
prop_shift2 = undefined

-- | Shifting by multiples of 24 is the identity
prop_shiftRows ∷ Eq a ⇒ Matrix a → Int → Bool
prop_shiftRows matrix (abs → n) =
  iterate shiftRows matrix !! (2*3*4*n)
  ==
  matrix

-- MixColumns test vectors from
-- https://en.wikipedia.org/wiki/Rijndael_mix_columns#Test_vectors_for_MixColumns.28.29.3B_not_for_InvMixColumns

vectors ∷ [([Exp Word8], [Exp Word8])]
vectors = [
  ([0xDB, 0x13, 0x53, 0x45], [0x8E, 0x4D, 0xA1, 0xBC]),
  ([0xF2, 0x0A, 0x22, 0x5C], [0x9F, 0xDC, 0x58, 0x9D]),
  ([0x01, 0x01, 0x01, 0x01], [0x01, 0x01, 0x01, 0x01]),
  ([0xC6, 0xC6, 0xC6, 0xC6], [0xC6, 0xC6, 0xC6, 0xC6]), 
  ([0xD4, 0xD4, 0xD4, 0xD5], [0xD5, 0xD5, 0xD7, 0xD6]), 
  ([0x2D, 0x26, 0x31, 0x4C], [0x4D, 0x7E, 0xBD, 0xF8])
  ]

testVectors ∷ Bool
testVectors = and [
  map eval (mixColumn before) == map eval after
  | (before, after) ← vectors
  ]