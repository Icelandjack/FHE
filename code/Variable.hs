module Variable where

import Control.Lens
import Numeric.Natural

type Name = VarName Natural
type Op   = Operand Name


-- | Variables, the unique part is their 'Natural' identifier, this
-- way variables constructed when going from a higher- to a
-- first-order representation won't care about the variable names:
-- only their number.

-- | Variables along with their name and identifier.
-- The identifier should be unique after a pass from 'makeFresh'.
data VarName id 
  = Variable String id
  deriving (Eq, Ord, Functor, Foldable, Traversable)

-- | Variable from converting HOAS to a first-order representation:
--    lam (\x -> x + x)
-- => Lam (Lambda 1) (Add (Var (Lambda 1)) (Var (Lambda 1)))
-- == Lam (Var "lam" 1) (Add (Var (V "lam" 1)) (Var (V "lam" 1)))
-- 
-- This is generated from a different source than other variables so
-- they are prefaced with "lam".
pattern Lambda ∷ id → VarName id
pattern Lambda id = Variable "lam" id

-- | Getting the identifier from a variable.
pattern VarId ∷ id → VarName id
pattern VarId id ← Variable _ id

data Label 
  = Label String Natural
  deriving (Eq, Ord)

-- | An Operand is roughly that which is an argument to an
-- instruction, it gets generated by the 'compile' function, this way
-- you can either return variables (registers) or return constant
-- values.
data Operand a
  = Reference a
  | ConstTru
  | ConstFls
  | ConstNum Int
  deriving (Functor, Traversable, Foldable)

instance Show a ⇒ Show (VarName a) where
  show (Variable name i) = "%" ++ name  ++ "_" ++ show i

instance Show Label where
  show (Label    name i) = name ++ "_" ++ show i

instance Show a ⇒ Show (Operand a) where
  show = \case
    Reference a → show a
    ConstTru    → "true"
    ConstFls    → "false"
    ConstNum i  → show i

-- Lenses

class HasVars s t a b | s → a, t → b, s b → t, t a → s where
  var ∷ Traversal s t a b
  default var ∷ (Traversable f, HasVars s t a b) 
              ⇒ Traversal (f s) (f t) a b
  var = traverseOf (traverse.var)

instance HasVars (VarName id) (VarName id') id id' where
  --  ∶ Traversal' Name Natural
  var ∷ Traversal (VarName id) (VarName id') id id'
  var f (Variable name id) = Variable <$> pure name <*> f id

instance HasVars Label Label Natural Natural where
  --  ∶ Traversal' Name Natural
  var ∷ Traversal' Label Natural
  var f (Label name id) = Label <$> pure name <*> f id

instance HasVars s t a b ⇒ HasVars (Operand s) (Operand t) a b where
  --     ∶ Traversal' Op Natural
  -- var ∷ Traversal (Operand s) (Operand t) a b
  -- var = traverseOf (traverse.var)

